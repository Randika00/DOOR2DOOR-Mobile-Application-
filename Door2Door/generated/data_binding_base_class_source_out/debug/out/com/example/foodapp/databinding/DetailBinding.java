// Generated by view binder compiler. Do not edit!
package com.example.foodapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.foodapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DetailBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button btnDelete;

  @NonNull
  public final Button btnSave;

  @NonNull
  public final Button btnShow;

  @NonNull
  public final Button btnUpdate;

  @NonNull
  public final TextView txt;

  @NonNull
  public final EditText txtAccount;

  @NonNull
  public final EditText txtBankName;

  @NonNull
  public final EditText txtType;

  private DetailBinding(@NonNull RelativeLayout rootView, @NonNull Button btnDelete,
      @NonNull Button btnSave, @NonNull Button btnShow, @NonNull Button btnUpdate,
      @NonNull TextView txt, @NonNull EditText txtAccount, @NonNull EditText txtBankName,
      @NonNull EditText txtType) {
    this.rootView = rootView;
    this.btnDelete = btnDelete;
    this.btnSave = btnSave;
    this.btnShow = btnShow;
    this.btnUpdate = btnUpdate;
    this.txt = txt;
    this.txtAccount = txtAccount;
    this.txtBankName = txtBankName;
    this.txtType = txtType;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DetailBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDelete;
      Button btnDelete = rootView.findViewById(id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnSave;
      Button btnSave = rootView.findViewById(id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btnShow;
      Button btnShow = rootView.findViewById(id);
      if (btnShow == null) {
        break missingId;
      }

      id = R.id.btnUpdate;
      Button btnUpdate = rootView.findViewById(id);
      if (btnUpdate == null) {
        break missingId;
      }

      id = R.id.txt;
      TextView txt = rootView.findViewById(id);
      if (txt == null) {
        break missingId;
      }

      id = R.id.txtAccount;
      EditText txtAccount = rootView.findViewById(id);
      if (txtAccount == null) {
        break missingId;
      }

      id = R.id.txtBankName;
      EditText txtBankName = rootView.findViewById(id);
      if (txtBankName == null) {
        break missingId;
      }

      id = R.id.txtType;
      EditText txtType = rootView.findViewById(id);
      if (txtType == null) {
        break missingId;
      }

      return new DetailBinding((RelativeLayout) rootView, btnDelete, btnSave, btnShow, btnUpdate,
          txt, txtAccount, txtBankName, txtType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
